apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.11'
}

def filesToExcludeFromCoverage = [
        "**/*MapperImpl.class"
]

jacocoTestReport {
    group = 'Reporting'
    description = 'Generates a Combined Jacoco Code Coverage Report.'

    executionData fileTree(buildDir).include('/jacoco/*.exec')

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: filesToExcludeFromCoverage)
        }))
    }

    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }

    dependsOn test
}

jacocoTestCoverageVerification {
    check.dependsOn it

    executionData fileTree(buildDir).include('/jacoco/*.exec')

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: filesToExcludeFromCoverage)
        }))
    }

    violationRules {
        failOnViolation = true

        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            element = 'METHOD'
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 3
            }
        }
    }
}

[unitTest, integrationTest].each {
    test.dependsOn it
    jacocoTestReport.dependsOn it
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
