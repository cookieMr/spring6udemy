apply plugin: 'checkstyle'
apply plugin: 'org.owasp.dependencycheck'

checkstyle {
    toolVersion = "10.12.3"
    configFile = file("$rootDir/gradle/config/checkstyle/google_checks.xml")
    ignoreFailures = false
    group = 'verification'
}

dependencyCheck {
    suppressionFile = file("$rootDir/gradle/config/owasp/suppressions.xml")
    failBuildOnCVSS = 0
    skipTestGroups = false
    analyzers.assemblyEnabled = false
}

tasks.register('validateCveSuppressions', Task) {
    group = 'verification'
    description = 'Checks if every CVE suppression has an expiration date'

    doLast {
        def xml = new groovy.xml.XmlSlurper(false, false)
                .parse(new File(dependencyCheck.suppressionFile))

        def seenVul = new HashSet<String>()
        def duplicates = new ArrayList<String>()
        def missingUntil = new ArrayList<String>()

        xml.'**'.findAll { node ->
            node.name() == 'suppress'
        }.each({ suppress ->
            def cve = ((String) suppress.'cve'.text()).toUpperCase()
            if (seenVul.contains(cve)) {
                duplicates.add(cve)
            } else {
                seenVul.add(cve)
            }
        }).findAll { node ->
            node.name() == 'suppress' && !node.attributes().containsKey('until')
        }.each { suppress ->
            def cve = ((String) suppress.'cve'.text()).toUpperCase()
            missingUntil.add(cve)
        }

        if (!duplicates.isEmpty()) {
            println "Duplicate CVE: ${duplicates.join(', ')}"
        }
        if (!missingUntil.isEmpty()) {
            println "CVE with missing 'until' attribute: ${missingUntil.join(', ')}"
        }

        if (!duplicates.isEmpty() || !missingUntil.isEmpty()) {
            throw new GradleException("CVE Suppressions are not set properly (see info above). Build failed.")
        }
    }
}

check.dependsOn dependencyCheckAnalyze
check.dependsOn validateCveSuppressions

tasks.withType(Checkstyle).configureEach {
    excludes = [
            "**/generated/**",
            "**/sources/**"
    ]
}

sonar {
    properties {
        property "sonar.projectKey", "cookieMr_spring6udemy"
        property "sonar.organization", "cookiemr-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/unitTest,src/integrationTest"
        property "sonar.sourceEncoding", "UTF-8"
    }
}
