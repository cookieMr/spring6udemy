plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'io.freefair.lombok' version '6.6.2'
}

group = 'mr.cookie'
version = '0.0.1'
sourceCompatibility = '17'

apply plugin: 'checkstyle'

repositories {
    mavenCentral()
}

ext {
    apacheCollectionsVersion = "4.4"
    assertjVersion = "3.24.2"
    checkstyleVersion = "0.0.35"
    jetBrainsAnnotationVersion = "24.0.0"
    lombokVersion = "1.18.26"
    mapStructVersion = "1.5.3.Final"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.apache.commons:commons-collections4:${apacheCollectionsVersion}"
    implementation "org.jetbrains:annotations:${jetBrainsAnnotationVersion}"

    runtimeOnly 'com.h2database:h2'

    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${checkstyleVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
tasks.withType(Test).configureEach {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = true
    }
}
jacoco {
    toolVersion = "0.8.8"
}

sonarqube {
    properties {
        property "sonar.projectKey", "cookieMr_spring6udemy"
        property "sonar.organization", "cookiemr-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

tasks.withType(Checkstyle).configureEach {
    exclude "**/generated/**"
    exclude "**/sources/**"
}
checkstyle {
    toolVersion '10.7.0'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}